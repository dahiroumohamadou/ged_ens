// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("backend.Model.Assistance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MembreId")
                        .HasColumnType("int");

                    b.Property<int>("Montant")
                        .HasColumnType("int");

                    b.Property<string>("Objet")
                        .HasColumnType("longtext");

                    b.Property<string>("Proposition")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MembreId");

                    b.ToTable("Assistances");
                });

            modelBuilder.Entity("backend.Model.Don", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("MembreId")
                        .HasColumnType("int");

                    b.Property<int>("Montant")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MembreId");

                    b.ToTable("Dons");
                });

            modelBuilder.Entity("backend.Model.Personnel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .HasColumnType("longtext");

                    b.Property<string>("LieuAffectation")
                        .HasColumnType("longtext");

                    b.Property<string>("Matricule")
                        .HasColumnType("longtext");

                    b.Property<string>("Noms")
                        .HasColumnType("longtext");

                    b.Property<string>("Sexe")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Personnels");
                });

            modelBuilder.Entity("backend.Model.Structure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<string>("Libele")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Structures");
                });

            modelBuilder.Entity("backend.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("KeepLoginIn")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<string>("SaltPassword")
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<string>("UserEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend.Models.Categorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("MontantAdhesion")
                        .HasColumnType("int");

                    b.Property<int?>("MontantCotisation")
                        .HasColumnType("int");

                    b.Property<string>("libele")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("backend.Models.Membre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategorieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdhesion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Fonction")
                        .HasColumnType("longtext");

                    b.Property<string>("Matricule")
                        .HasColumnType("longtext");

                    b.Property<int?>("MontantAdhesion")
                        .HasColumnType("int");

                    b.Property<string>("Noms")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Prenoms")
                        .HasColumnType("longtext");

                    b.Property<string>("StrcutureAffectation")
                        .HasColumnType("longtext");

                    b.Property<int>("StructureId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategorieId");

                    b.HasIndex("StructureId");

                    b.ToTable("Membres");
                });

            modelBuilder.Entity("backend.Models.Paiement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MembreId")
                        .HasColumnType("int");

                    b.Property<int>("Montant")
                        .HasColumnType("int");

                    b.Property<int>("PeriodiciteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("datePaiement")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MembreId");

                    b.HasIndex("PeriodiciteId");

                    b.ToTable("Paiements");
                });

            modelBuilder.Entity("backend.Models.Periodicite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("annee")
                        .HasColumnType("longtext");

                    b.Property<string>("mois")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Periodicites");
                });

            modelBuilder.Entity("backend.Model.Assistance", b =>
                {
                    b.HasOne("backend.Models.Membre", "Membre")
                        .WithMany("Assistances")
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("backend.Model.Don", b =>
                {
                    b.HasOne("backend.Models.Membre", "membre")
                        .WithMany("Dons")
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("membre");
                });

            modelBuilder.Entity("backend.Models.Membre", b =>
                {
                    b.HasOne("backend.Models.Categorie", "Categorie")
                        .WithMany("Membres")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.Model.Structure", "Structure")
                        .WithMany("Membres")
                        .HasForeignKey("StructureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Categorie");

                    b.Navigation("Structure");
                });

            modelBuilder.Entity("backend.Models.Paiement", b =>
                {
                    b.HasOne("backend.Models.Membre", "Membre")
                        .WithMany("Paiements")
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend.Models.Periodicite", "Periodicite")
                        .WithMany("Paiements")
                        .HasForeignKey("PeriodiciteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Membre");

                    b.Navigation("Periodicite");
                });

            modelBuilder.Entity("backend.Model.Structure", b =>
                {
                    b.Navigation("Membres");
                });

            modelBuilder.Entity("backend.Models.Categorie", b =>
                {
                    b.Navigation("Membres");
                });

            modelBuilder.Entity("backend.Models.Membre", b =>
                {
                    b.Navigation("Assistances");

                    b.Navigation("Dons");

                    b.Navigation("Paiements");
                });

            modelBuilder.Entity("backend.Models.Periodicite", b =>
                {
                    b.Navigation("Paiements");
                });
#pragma warning restore 612, 618
        }
    }
}
